{"version":3,"sources":["component/Header.tsx","component/Dropdown.tsx","component/Game.tsx","component/SelectLevel.tsx","component/Leaderboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","useState","characters","setCharacters","timer","setTimer","useEffect","includes","charactersNames","forEach","name","push","className","src","alt","Date","now","JSON","stringify","gameEnded","gameStarted","setTimeout","foundCharacter","index","findIndex","e","key","toString","title","onClick","document","location","reload","showLeaderBoard","id","HH_MM_SS","Dropdown","choicesText","choices","text","event","target","textContent","x","y","style","top","left","playedBefore","localStorage","getItem","setItem","Game","charactersDatabase","firebase","firestore","collection","doc","imageLoaded","setImageLoaded","setCharactersNames","notification","setNotification","dropdownHandler","setDropdownHandler","getCoordinateFromPixels","img","querySelector","clientWidth","clientHeight","imgWidth","imgHeight","Math","round","offsetLeft","offsetTop","console","error","dropdownClicked","character","a","showNotification","coordinateX","coordinateY","matchCharacterWithCoords","isCorrect","alert","undefined","correctChoiceAction","updateCharacters","names","arr","indexOf","splice","characterName","result","get","then","dataFound","exists","data","coordinates","startX","endX","startY","endY","message","color","time","backgroundColor","opacity","length","gameOver","onLoad","imageIsLoaded","dropDownHere","pageX","pageY","levels","Map","set","SelectLevel","Leaderboard","rows","setRows","showDifficultyTable","difficulty","Object","keys","dataArr","rowsArr","i","assign","sort","b","duration","itr","map","rank","row","ID","recordedAt","toUTCString","showTable","classList","add","table","random","at","playerRecord","scrollIntoView","behavior","block","inline","setAttribute","new_","old","remove","uniqueId","ceil","toPrecision","replace","inSeconds","hours","floor","minutes","seconds","App","setGameStarted","setGameEnded","sessionID","setDifficulty","setMain","imageIsLoadedAction","updateCharactersCallback","gameOverCallback","main","form","setForm","newFoundCharacter","setNewFoundCharacter","sessionsRef","thisSessionRef","leaderBoardRef","addedIn","gameStartedIn","gameEndedIn","update","showForm","ageInHours","querySnapshot","ref","delete","addToLeaderBoard","nameSubmitted","preventDefault","value","trim","submit","disabled","isNameUsedAlready","this","startIn","difficulties","type","onSubmit","required","addSessionToDatabase","clearIDS","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","getElementById"],"mappings":"yZAqFeA,MAjFf,SAAgBC,GACZ,MAAoCC,mBAAwB,IAA5D,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAoDA,OAlDAC,qBAAU,WACN,GAAIN,EAAME,aAAeF,EAAME,WAAWK,SAAS,SAAU,CACzD,IAAMC,EAAkBR,EAAME,WAC1BA,EAAkB,GACtBM,EAAgBC,SAAQ,SAACC,GACrBR,EAAWS,KACP,yBAEIC,UAAU,oBAFd,UAII,qBACIC,IAAK,qBAAuBH,EAAO,OACnCI,IAAKJ,IAET,qCAAaA,MAPRA,EAAOK,KAAKC,WAW7Bb,EAAcD,MAEnB,CAACe,KAAKC,UAAUlB,EAAME,cACzBI,qBAAU,YACDN,EAAMmB,WAAanB,EAAMoB,YAC1BC,YAAW,WACPhB,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC7B,KACFC,GAAU,GAEXL,EAAMmB,WAAWhB,EAAc,MACpC,CAACH,EAAMoB,YAAapB,EAAMmB,UAAWf,IACxCE,qBAAU,WACN,IAAMI,EAAOV,EAAMsB,eACbC,EAAQrB,EAAWsB,WAAU,SAACC,GAAD,OAC/BA,EAAEC,IAAMD,EAAEC,IAAIC,WAAWpB,SAASG,IAAS,KAE3Ca,GAAS,IACTrB,EAAWqB,GACP,yBAEIX,UAAU,0BAFd,UAII,qBACIC,IAAK,qBAAuBH,EAAO,OACnCI,IAAKJ,IAET,qCAAaA,MAPRA,EAAOK,KAAKC,UAW9B,CAAChB,EAAMsB,iBAEN,mCACI,gCACI,8BACI,qBACIM,MAAM,QACNf,IAAI,mBACJC,IAAI,QACJe,QAAS,WACLC,SAASC,SAASC,cAI9B,8BACI,qBACIJ,MAAM,cACNf,IAAI,yBACJC,IAAI,mBACJe,QAAS7B,EAAMiC,uBAI3B,qBAAKC,GAAG,QAAR,SAAiB9B,GAAS,EAAI+B,EAAS/B,GAAS,KAChD,qBAAK8B,GAAG,aAAR,SAAsBhC,Q,oBCxDnBkC,MAxBf,SAAkBpC,GACd,IAAMqC,EAAW,YAAOrC,EAAMsC,SAC1BA,EAAe,GAYnB,OAXAD,EAAY5B,SAAQ,SAAC8B,GAAD,OAChBD,EAAQ3B,KACJ,qBAAgBC,UAAU,SAA1B,SACK2B,GADKA,OAUd,qBACIV,QANR,SAA2BW,GACnBA,EAAMC,OAAO7B,UAAUL,SAAS,WAChCP,EAAM6B,QAAQW,EAAMC,OAAOC,YAAa1C,EAAM2C,EAAG3C,EAAM4C,IAKvDC,MAAO,CAAEC,IAAK9C,EAAM4C,EAAI,KAAMG,KAAM/C,EAAM2C,EAAI,MAC9CT,GAAG,WAHP,SAKKI,KChBPU,G,QAAiBC,aAAaC,QAAQ,iBAC5CD,aAAaE,QAAQ,eAAgB,OAkNtBC,MAhNf,SAAcpD,GACV,IAAMqD,EAAqBC,IACtBC,YACAC,WAJU,YAKVC,IAAI,cACT,EAAsCxD,oBAAS,GAA/C,mBAAOyD,EAAP,KAAoBC,EAApB,KACA,EAA8C1D,mBAASD,EAAME,YAA7D,mBAAOM,EAAP,KAAwBoD,EAAxB,KACA,EAAwC3D,mBAAS,8BAAjD,mBAAO4D,EAAP,KAAqBC,EAArB,KACA,EAA8C7D,mBAAS,8BAAvD,mBAAO8D,EAAP,KAAwBC,EAAxB,KAqBA,SAASC,EAAwBtB,EAAWC,GACxC,IAAMsB,EAAWpC,SAASqC,cAAc,eACxC,GAAID,EAAK,CACL,MAA8B,CAACA,EAAIE,YAAaF,EAAIG,cAA7CC,EAAP,KAAiBC,EAAjB,KAGA,MAAO,CACHC,KAAKC,MAA8B,KAAtB9B,EAAIuB,EAAIQ,YAAsBJ,GAC3CE,KAAKC,MAA6B,KAArB7B,EAAIsB,EAAIS,WAAqBJ,IAGlD,OADOK,QAAQC,MAAM,iBACd,GAxCW,SAuDPC,EAvDO,kFAuDtB,WAA+BC,EAAmBpC,EAAWC,GAA7D,uBAAAoC,EAAA,yDACIC,EAAiB,cAAe,WAAY,GADhD,EAEuChB,EAAwBtB,EAAGC,GAFlE,mBAEWsC,EAFX,KAEwBC,EAFxB,MAGQD,IAAeC,EAHvB,wBAIQnB,EAAmB,8BAJ3B,kBAO8BoB,EACdL,EACAG,EACAC,GAVhB,OAOYE,EAPZ,yDAaYC,MAAM,oDACNV,QAAQC,MAAR,MAdZ,gBAiB0BU,IAAdF,EAjBZ,qBAkBgBA,EAlBhB,kCAmBsBJ,EAAiB,WAAY,cAAe,KAnBlE,QAoBgBO,EAAoBT,GACpB/E,EAAMyF,iBAAiBV,GArBvC,yCAuBsBE,EAAiB,aAAc,MAAO,KAvB5D,2DAvDsB,+BAmFPO,EAnFO,8EAmFtB,WAAmCT,GAAnC,SAAAC,EAAA,sDACIpB,GAAmB,SAAC8B,GAChB,IAAIC,EAAG,YAAOD,GAGd,OAFIC,EAAIC,QAAQb,IAAc,GAC1BY,EAAIE,OAAOF,EAAIC,QAAQb,GAAY,GAChCY,KALf,4CAnFsB,+BA2FPP,EA3FO,kFA2FtB,WACIU,EACAZ,EACAC,GAHJ,eAAAH,EAAA,6DAKQe,GAAS,EALjB,SAMU1C,EAAmB2C,MAAMC,MAAK,SAACxC,GACjC,IAAIyC,GAAY,EAChB,GAAIzC,EAAI0C,OAAQ,CACZ,IAAMjG,EAAauD,EAAI2C,OACvB,GAAIlG,GACIA,EAAW4F,GAAgB,CAC3BI,GAAY,EACZ,IAAIG,EAAcnG,EAAW4F,GAGzBZ,GAAemB,EAAYC,QAC3BpB,GAAemB,EAAYE,MAC3BpB,GAAekB,EAAYG,QAC3BrB,GAAekB,EAAYI,OAE3BV,GAAS,IAIpBG,GAAWtB,QAAQC,MAAM,gCAzBtC,gCA4BWkB,GA5BX,4CA3FsB,+BA0HPd,EA1HO,kFA0HtB,WACIyB,EACAC,EACAC,GAHJ,SAAA5B,EAAA,sDAKIlB,EACI,qBACI5B,GAAG,eACHW,MAAO,CAAEgE,gBAAiBF,EAAOG,QAAS,GAF9C,SAIKJ,KAITrF,YAAW,WACPyC,EACI,qBACI5B,GAAG,eACHW,MAAO,CAAEgE,gBAAiBF,EAAOG,QAAS,GAF9C,SAIKJ,QAITE,GAAQ,IACRvF,YAAW,WACPyC,EACI,qBACI5B,GAAG,eACHW,MAAO,CAAEgE,gBAAiBF,EAAOG,QAAS,GAF9C,SAIKJ,OAGVE,GACHvF,YAAW,WACPyC,EAAgB,gCACjB8C,EAAO,KArClB,4CA1HsB,sBAiMtB,OANAtG,qBAAU,WACDoD,GAAauB,EAAiB,aAAc,WAAY,KAC9D,CAACvB,IACJpD,qBAAU,WACyB,IAA3BE,EAAgBuG,QANpB/G,EAAMgH,aAOP,CAAC/F,KAAKC,UAAUV,KAEf,sBAAK0B,GAAG,OAAR,UACK2B,EACAE,EACD,qBACIlB,MAAO,CAAEiE,QAAS,GAClBG,OA7LZ,SAAmBzE,GACfmB,GAAe,GACfG,EAAgB,8BACXd,GACDiC,EACI,qFACA,UACA,KAGRzC,EAAMC,OAAOI,MAAMiE,QAAU,IAC7B9G,EAAMkH,iBAmLErG,IAAI,sBACJqB,GAAG,aACHL,QAnLZ,SAAuBW,IAmBvB,SAAsBG,EAAWC,GAC7BoB,EAAmB,8BACnB3C,YAAW,WACP2C,EACI,cAAC,EAAD,CACI1B,QAAS9B,EACTmC,EAAGA,EACHC,EAAGA,EACHf,QAASiD,QAxBrBqC,CAF+B3E,EAAvB4E,MAAuB5E,EAAb6E,QAmLVvG,IAAI,iBClNhBwG,G,MAAS,IAAIC,KACjBD,EAAOE,IAAI,OAAQ,CAAC,WAAY,SAAU,YAC1CF,EAAOE,IAAI,SAAU,CAAC,SAAU,OAAQ,aACxCF,EAAOE,IAAI,OAAQ,CAAC,QAAS,eAAgB,YAoB9BC,MAnBf,SAAqBzH,GASjB,OACI,qBAAKkC,GAAG,mBAAR,SACI,sBAAKA,GAAG,cAAcL,QAV9B,SAAuBW,GACfA,EAAMC,OAAOP,GAAG3B,SAAS,WACzBP,EAAM6B,QACFW,EAAMC,OAAOC,YACb4E,EAAOtB,IAAIxD,EAAMC,OAAOC,eAM5B,UACI,qBAAKR,GAAG,cAAR,kBACA,qBAAKA,GAAG,gBAAR,oBACA,qBAAKA,GAAG,cAAR,wB,MC4EDwF,MArFf,SAAqB1H,GACjB,MAAwBC,mBAAwB,IAAhD,mBAAO0H,EAAP,KAAaC,EAAb,KACA,SAASC,EAAoBC,EAAoB1B,GAC7C,GAAiC,IAA7B2B,OAAOC,KAAK5B,GAAMW,OAAc,CAChC,IAAIkB,EAAuB,GACvBC,EAA8B,GAClC,IAAK,IAAIC,KAAK/B,EACV6B,EAAQtH,KAAKoH,OAAOK,OAAO,CAAE1H,KAAMyH,GAAK/B,EAAK+B,KAEjDF,EAAQI,MAAK,SAACrD,EAAGsD,GAAJ,OAAUtD,EAAEuD,SAAWD,EAAEC,YACtC,IAAIC,EAAM,EACVP,EAAQQ,KAAI,SAAChH,GAAD,OAAOsG,OAAOK,OAAO3G,EAAG,CAAEiH,KAAMF,SAC5CP,EAAQxH,SAAQ,SAACkI,GACbT,EAAQvH,KACJ,qBAAIuB,GAAI,KAAOyG,EAAIC,GAAnB,UACI,6BAAKD,EAAID,OACT,6BAAKC,EAAIjI,OACT,6BAAKyB,EAASwG,EAAIJ,SAAW,OAC7B,6BAAK,IAAIxH,KAAK4H,EAAIE,YAAYC,kBAJNH,EAAIjI,KAAOoH,IAQ3CF,EAAQM,WAGZN,EAAQ,IAsChB,OAvBAtH,qBAAU,WAAO,IAAD,EACZ,UAAAwB,SACKqC,cAAc,IAAMnE,EAAM+I,UAAY,iBAD3C,SAEMC,UAAUC,IAAI,gBACpB,IAAMC,EAAQlJ,EAAM+I,WAAa,OAC7B/I,EAAMoG,KAAMyB,EAAoBqB,EAAOlJ,EAAMoG,KAAK8C,IACjDtB,EAAQ,CAAC,4CAAU,UAAYpD,KAAK2E,cAC1C,CAACnJ,EAAMoJ,GAAIpJ,EAAMoG,KAAMpG,EAAM+I,YAChCzI,qBAAU,WACN,IAAM+I,EAAwBvH,SAASqC,cAAcnE,EAAMoJ,IAEvDC,IACAA,EAAaC,eAAe,CACxBC,SAAU,SACVC,MAAO,SACPC,OAAQ,YAEZJ,EAAaK,aACT,QACA,4CAGT,CAACzI,KAAKC,UAAUyG,KAEf,sBAAKzF,GAAG,cAAR,UACI,sBAAKL,QArCb,SAAqBW,GACjB,IAAMmH,EAAgBnH,EAAMC,OACtBmH,EAAsB9H,SAASqC,cAAc,iBAC/CyF,GAAKA,EAAIZ,UAAUa,OAAO,gBAE9BF,EAAKX,UAAUC,IAAI,gBACnBpB,EACI8B,EAAKjH,aAAe,OACpB1C,EAAMoG,KAAKuD,EAAKjH,aAAe,UA6B/B,UACI,qBAAKR,GAAG,aAAR,kBACA,qBAAKA,GAAG,eAAR,oBACA,qBAAKA,GAAG,aAAR,qBAEJ,gCACI,kCACI,+BACI,sCACA,sCACA,wCACA,yCAGHyF,WCqGrB,IAAMmC,EAAW,WACb,OAAOtF,KAAKuF,KAAKvF,KAAK2E,SAAW3E,KAAK2E,SAAWpI,KAAKC,OACjDgJ,YAAY,IACZrI,WACAsI,QAAQ,IAAK,IACbtI,YAEF,SAASQ,EAAS+H,GACrB,IAAIC,EAAa3F,KAAK4F,MAAMF,EAAY,MACpCG,EAAe7F,KAAK4F,OAAOF,EAAoB,KAARC,GAAgB,IACvDG,EAAeJ,EAAoB,KAARC,EAAyB,GAAVE,EAY9C,OAVIF,EAAQ,IAAgB,IAAVA,EACdA,EAAQ,IAAMA,EAAQ,IACL,IAAVA,IAAaA,EAAQ,IAC5BE,EAAU,KACVA,EAAU,IAAMA,IALpBC,EAAU9F,KAAKC,MAAgB,IAAV6F,GAAiB,KAOxB,KACVA,EAAU,IAAMA,GAGbH,EAAQ,GAAKE,EAAU,IAAMC,EAGzBC,MAxMf,WACI,MAAsCtK,oBAAS,GAA/C,mBAAOmB,EAAP,KAAoBoJ,EAApB,KACA,EAAkCvK,oBAAS,GAA3C,mBAAOkB,EAAP,KAAkBsJ,EAAlB,KACA,EAAkCxK,mBAAS6J,KAA3C,mBAAOY,EAAP,KACA,GADA,KACwBzK,mBACpB,cAAC,EAAD,CAAa4B,QAUjB,SAAuBiG,EAAoB5H,GACvCyK,EAAc7C,GACd8C,EACI,cAAC,EAAD,CACI1D,cAAe2D,EACf3K,WAAYA,EACZuF,iBAAkBqF,EAClB9D,SAAU+D,KAGlBnH,EAAmB1D,QArBvB,mBAAO8K,EAAP,KAAaJ,EAAb,KAIA,EAAwB3K,mBAAS,8BAAjC,mBAAOgL,EAAP,KAAaC,EAAb,KACA,EAA8CjL,mBAAS,CAAC,UAAxD,mBAAOO,EAAP,KAAwBoD,EAAxB,KACA,EAAoC3D,mBAAS,gBAA7C,mBAAO6H,EAAP,KAAmB6C,EAAnB,KACA,EAAkD1K,mBAAS,IAA3D,mBAAOkL,EAAP,KAA0BC,EAA1B,KACMC,EAAc/H,IAASC,YAAYC,WAAW,YAC9C8H,EAAiBD,EAAY5H,IAAIiH,GACjCa,EAAiBjI,IAASC,YAAYC,WAAW,eAd5C,4CA4BX,sBAAAwB,EAAA,sDACIsG,EAAe9D,IAAI,CACfgE,QAASzK,KAAKC,MACdyK,cAAe,KACfC,YAAa,KACb5D,WAAY,OALpB,4CA5BW,+BAoCI+C,IApCJ,2EAoCX,sBAAA7F,EAAA,sDACIwF,GAAe,GACfc,EAAeK,OAAO,CAAEF,cAAe1K,KAAKC,QAFhD,4CApCW,+BAwCI+J,IAxCJ,2EAwCX,sBAAA/F,EAAA,6DACIyF,GAAa,GADjB,SAEUa,EAAeK,OAAO,CAAED,YAAa3K,KAAKC,QAFpD,OAGI4K,KAHJ,4CAxCW,kEA8CX,WAAwBC,GAAxB,SAAA7G,EAAA,sDACIqG,EAAYrF,MAAMC,MAAK,SAAC6F,GACpBA,EAAcrL,SAAQ,SAACgD,GACnB,IAAI2C,EAAO3C,EAAI2C,OACLrF,KAAKC,MAAQoF,EAAKoF,SACF,GAAbK,EAAkB,GAAK,KACjBpI,EAAIsI,IAAIC,eANvC,4CA9CW,+BAyDIlB,EAzDJ,8EAyDX,WAAwC/F,GAAxC,SAAAC,EAAA,sDACIoG,EAAqBrG,GADzB,4CAzDW,+BA4DIkH,GA5DJ,mFA4DX,WAAgC7F,EAAgB1F,GAAhD,mBAAAsE,EAAA,0DACQoB,EADR,uBAEcmC,EAAWnC,EAAKsF,YAActF,EAAKqF,cACnC5C,EAAazC,EAAKsF,YAClB5D,EAAa1B,EAAK0B,WAJhC,SAMcyD,EAAe9H,IAAIqE,GAAY6D,OAA/B,eACDjL,EAAO,CAAE6H,WAAUM,aAAYD,GAAI8B,KAPhD,6BASWpF,MAAM,yCATjB,4CA5DW,+BAuEI4G,GAvEJ,iFAuEX,WAA6B1J,GAA7B,qBAAAwC,EAAA,yDACIxC,EAAM2J,iBAENzL,GADIA,EAFR,UAEuB8B,EAAMC,cAF7B,aAEuB,EAAc0B,cAAc,eAAeiI,OAClDC,QACNC,EAJV,UAImB9J,EAAMC,cAJzB,aAImB,EAAc0B,cAAc,mBACpCoI,UAAW,GACd/J,EAAMC,OANd,gCAOc6I,EAAetF,MAAMC,KAArB,uCAA0B,WAAOxC,GAAP,iBAAAuB,EAAA,0DACxBvB,EAAI0C,OADoB,iCAEFqG,GAClB9L,EADmC,UAEnC+C,EAAI2C,cAF+B,aAEnC,EAAY0B,YAJQ,yCAOpBoD,EAAQ,8BACRN,EAAQ,cAAC,EAAD,KARY,SASdqB,GAAiBxI,EAAI2C,OAAoB1F,GAT3B,OAUpBuB,GAAe,UAACwB,EAAI2C,cAAL,aAAC,EAAY0B,WAAYpH,GAVpB,wBAYpB4L,EAAOC,UAAW,EAClBjH,MAAM,8BAbc,4CAA1B,kCAAAmH,KAAA,gBAPd,4CAvEW,+BAgGID,GAhGJ,mFAgGX,WAAiC9L,EAAcoH,GAA/C,eAAA9C,EAAA,6DACQe,GAAS,EADjB,SAEUwF,EACD9H,IAAIqE,GACJ9B,MACAC,MAAK,SAACxC,GACCA,EAAI0C,SACC1C,EAAI2C,QAAU,IAAI1F,KACnBqF,GAAS,MAR7B,gCAYWA,GAZX,4CAhGW,+BA8GI9D,GA9GJ,mFA8GX,WAA+ByK,EAAiBhM,GAAhD,eAAAsE,EAAA,6DACQ2H,EAAoB,GAD5B,SAEUpB,EAAevF,MAAMC,MAAK,SAAC6F,GAC7BA,EAAcrL,SAAQ,SAACgD,GACfA,EAAI0C,SAAQwG,EAAalJ,EAAIvB,IAAMuB,EAAI2C,cAJvD,OAOIwE,EACI,cAAC,EAAD,CACIxE,KAAMuG,EACN5D,UAAW2D,EACXtD,GAAI,MAAQsB,KAXxB,4CA9GW,sBA6HX,SAASkB,KACLV,EACI,uBAAMrI,MAAO,CAAEiE,QAAS,GAAxB,UACI,sBAAK5E,GAAG,uBAAR,UACI,+CACA,uBAAOA,GAAG,kBAEd,uBAAOA,GAAG,gBAAgB0K,KAAK,eAGvCvL,YAAW,WACP6J,EACI,uBAAM2B,SAAUX,GAAerJ,MAAO,CAAEiE,QAAS,GAAjD,UACI,sBAAK5E,GAAG,uBAAR,UACI,+CACA,uBAAOA,GAAG,aAAa4K,UAAQ,OAEnC,uBAAO5K,GAAG,gBAAgB0K,KAAK,iBAGxC,KAWP,OATAtM,qBAAU,YAnJC,mCAqJPyM,GArJO,oCAuJPC,CAAS,KACV,IACH1M,qBAAU,WACNgL,EAAeK,OAAO,CAAE7D,WAAYA,MACrC,CAACA,IAEA,sBAAKlH,UAAU,MAAf,UACI,cAAC,EAAD,CACIU,eAAgB6J,EAChB/J,YAAaA,EACblB,WAAYM,EACZW,UAAWA,EACXc,gBAAiB,WACb2I,EAAQ,cAAC,EAAD,KACR3I,GAAgB,OAAQ,IACxBwI,GAAa,MAGpBQ,EACAD,MC3KEiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlH,MAAK,YAAkD,IAA/CmH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHDO,EAAMnK,IAASoK,cAAc,CACtCC,OAAQ,0CACRC,WAAY,sCACZC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAEnBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJtM,SAASuM,eAAe,SAG5BpB,M","file":"static/js/main.d030e5c8.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { HH_MM_SS } from '../App';\r\nimport '../style/Header.css';\r\nfunction Header(props: any) {\r\n    const [characters, setCharacters] = useState<JSX.Element[]>([]);\r\n    const [timer, setTimer] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (props.characters && !props.characters.includes('empty')) {\r\n            const charactersNames = props.characters;\r\n            let characters: any = [];\r\n            charactersNames.forEach((name: string) => {\r\n                characters.push(\r\n                    <figure\r\n                        key={name + Date.now()}\r\n                        className=\"character-preview\"\r\n                    >\r\n                        <img\r\n                            src={'assets/characters/' + name + '.png'}\r\n                            alt={name}\r\n                        ></img>\r\n                        <figcaption>{name}</figcaption>\r\n                    </figure>\r\n                );\r\n            });\r\n            setCharacters(characters);\r\n        }\r\n    }, [JSON.stringify(props.characters)]);\r\n    useEffect(() => {\r\n        if (!props.gameEnded && props.gameStarted)\r\n            setTimeout(() => {\r\n                setTimer((timer) => timer + 1);\r\n            }, 1000);\r\n        else setTimer(-1);\r\n\r\n        if (props.gameEnded) setCharacters([]);\r\n    }, [props.gameStarted, props.gameEnded, timer]);\r\n    useEffect(() => {\r\n        const name = props.foundCharacter;\r\n        const index = characters.findIndex((e) =>\r\n            e.key ? e.key.toString().includes(name) : -1\r\n        );\r\n        if (index > -1) {\r\n            characters[index] = (\r\n                <figure\r\n                    key={name + Date.now()}\r\n                    className=\"character-preview found\"\r\n                >\r\n                    <img\r\n                        src={'assets/characters/' + name + '.png'}\r\n                        alt={name}\r\n                    ></img>\r\n                    <figcaption>{name}</figcaption>\r\n                </figure>\r\n            );\r\n        }\r\n    }, [props.foundCharacter]);\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <div>\r\n                    <img\r\n                        title=\"Retry\"\r\n                        src=\"assets/retry.png\"\r\n                        alt=\"Retry\"\r\n                        onClick={() => {\r\n                            document.location.reload();\r\n                        }}\r\n                    ></img>\r\n                </div>\r\n                <div>\r\n                    <img\r\n                        title=\"Leaderboard\"\r\n                        src=\"assets/leaderboard.png\"\r\n                        alt=\"show leaderboard\"\r\n                        onClick={props.showLeaderBoard}\r\n                    ></img>\r\n                </div>\r\n            </nav>\r\n            <div id=\"timer\">{timer > -1 ? HH_MM_SS(timer) : ''}</div>\r\n            <div id=\"characters\">{characters}</div>\r\n        </header>\r\n    );\r\n}\r\nexport default Header;\r\n","import '../style/Dropdown.css';\r\nfunction Dropdown(props: any) {\r\n    const choicesText = [...props.choices];\r\n    let choices: any = [];\r\n    choicesText.forEach((text) =>\r\n        choices.push(\r\n            <div key={text} className=\"choice\">\r\n                {text}\r\n            </div>\r\n        )\r\n    );\r\n    function sendCharacterName(event: any) {\r\n        if (event.target.className.includes('choice'))\r\n            props.onClick(event.target.textContent, props.x, props.y);\r\n    }\r\n    return (\r\n        <div\r\n            onClick={sendCharacterName}\r\n            style={{ top: props.y + 'px', left: props.x + 'px' }}\r\n            id=\"Dropdown\"\r\n        >\r\n            {choices}\r\n        </div>\r\n    );\r\n}\r\nexport default Dropdown;\r\n","import '../style/Game.css';\r\nimport Dropdown from './Dropdown';\r\nimport { useEffect, useState } from 'react';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nconst playedBefore = !!localStorage.getItem('playedBefore');\r\nlocalStorage.setItem('playedBefore', 'yes');\r\nconst IMAGE_NAME = 'building';\r\nfunction Game(props: any) {\r\n    const charactersDatabase = firebase\r\n        .firestore()\r\n        .collection(IMAGE_NAME)\r\n        .doc('characters');\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    const [charactersNames, setCharactersNames] = useState(props.characters);\r\n    const [notification, setNotification] = useState(<></>);\r\n    const [dropdownHandler, setDropdownHandler] = useState(<></>);\r\n\r\n    function startGame(event: any) {\r\n        setImageLoaded(true);\r\n        setNotification(<></>);\r\n        if (!playedBefore) {\r\n            showNotification(\r\n                'Find the characters who are displayed in the header in the shortest time possible.',\r\n                '#0a7afa',\r\n                5000\r\n            );\r\n        }\r\n        event.target.style.opacity = '1';\r\n        props.imageIsLoaded();\r\n    }\r\n    function newCoordinate(event: any) {\r\n        const { pageX: x, pageY: y } = event;\r\n\r\n        dropDownHere(x, y);\r\n    }\r\n\r\n    function getCoordinateFromPixels(x: number, y: number) {\r\n        const img: any = document.querySelector('#game-image');\r\n        if (img) {\r\n            const [imgWidth, imgHeight] = [img.clientWidth, img.clientHeight];\r\n\r\n            //dividing the click position on the image size to get responsive result for all devices\r\n            return [\r\n                Math.round(((x - img.offsetLeft) * 1000) / imgWidth),\r\n                Math.round(((y - img.offsetTop) * 1000) / imgHeight),\r\n            ];\r\n        } else console.error('no game image');\r\n        return [];\r\n    }\r\n    function dropDownHere(x: string, y: string) {\r\n        setDropdownHandler(<></>);\r\n        setTimeout(() => {\r\n            setDropdownHandler(\r\n                <Dropdown\r\n                    choices={charactersNames}\r\n                    x={x}\r\n                    y={y}\r\n                    onClick={dropdownClicked}\r\n                ></Dropdown>\r\n            );\r\n        });\r\n    }\r\n    async function dropdownClicked(character: string, x: number, y: number) {\r\n        showNotification('Checking...', '#F07626', -1);\r\n        const [coordinateX, coordinateY] = getCoordinateFromPixels(x, y);\r\n        if (coordinateX && coordinateY) {\r\n            setDropdownHandler(<></>);\r\n            let isCorrect;\r\n            try {\r\n                isCorrect = await matchCharacterWithCoords(\r\n                    character,\r\n                    coordinateX,\r\n                    coordinateY\r\n                );\r\n            } catch (e) {\r\n                alert('Check your internet connection, or open a VPN :)');\r\n                console.error(e);\r\n            }\r\n\r\n            if (isCorrect !== undefined) {\r\n                if (isCorrect) {\r\n                    await showNotification('Correct!', 'yellowgreen', 950);\r\n                    correctChoiceAction(character);\r\n                    props.updateCharacters(character);\r\n                } else {\r\n                    await showNotification('Incorrect!', 'red', 950);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    async function correctChoiceAction(character: string) {\r\n        setCharactersNames((names: string[]) => {\r\n            let arr = [...names];\r\n            if (arr.indexOf(character) > -1)\r\n                arr.splice(arr.indexOf(character), 1);\r\n            return arr;\r\n        });\r\n    }\r\n    async function matchCharacterWithCoords(\r\n        characterName: string,\r\n        coordinateX: number,\r\n        coordinateY: number\r\n    ) {\r\n        let result = false;\r\n        await charactersDatabase.get().then((doc) => {\r\n            let dataFound = false;\r\n            if (doc.exists) {\r\n                const characters = doc.data();\r\n                if (characters)\r\n                    if (characters[characterName]) {\r\n                        dataFound = true;\r\n                        let coordinates = characters[characterName];\r\n\r\n                        if (\r\n                            coordinateX >= coordinates.startX &&\r\n                            coordinateX <= coordinates.endX &&\r\n                            coordinateY >= coordinates.startY &&\r\n                            coordinateY <= coordinates.endY\r\n                        ) {\r\n                            result = true;\r\n                        }\r\n                    }\r\n            }\r\n            if (!dataFound) console.error('characters data not found');\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    async function showNotification(\r\n        message: string,\r\n        color: string,\r\n        time: number\r\n    ) {\r\n        setNotification(\r\n            <div\r\n                id=\"notification\"\r\n                style={{ backgroundColor: color, opacity: 0 }}\r\n            >\r\n                {message}\r\n            </div>\r\n        );\r\n\r\n        setTimeout(() => {\r\n            setNotification(\r\n                <div\r\n                    id=\"notification\"\r\n                    style={{ backgroundColor: color, opacity: 1 }}\r\n                >\r\n                    {message}\r\n                </div>\r\n            );\r\n        });\r\n        if (time > -1) {\r\n            setTimeout(() => {\r\n                setNotification(\r\n                    <div\r\n                        id=\"notification\"\r\n                        style={{ backgroundColor: color, opacity: 0 }}\r\n                    >\r\n                        {message}\r\n                    </div>\r\n                );\r\n            }, time);\r\n            setTimeout(() => {\r\n                setNotification(<></>);\r\n            }, time + 10);\r\n        }\r\n    }\r\n\r\n    //for placing new characters\r\n    //first click set the start position for x and y\r\n    //second click set the star position for x and y\r\n    function setCharacterHere(characterName: string, x: number, y: number) {\r\n        charactersDatabase.get().then((doc) => {\r\n            if (doc.exists) {\r\n                const characters = doc.data();\r\n                if (characters) {\r\n                    if (!characters[characterName]) {\r\n                        let map = { startX: x, startY: y };\r\n                        characters[characterName] = map;\r\n                        charactersDatabase.set(characters);\r\n                    } else {\r\n                        characters[characterName].endX = x;\r\n                        characters[characterName].endY = y;\r\n                        charactersDatabase.set(characters);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    function gameOver() {\r\n        props.gameOver();\r\n    }\r\n    useEffect(() => {\r\n        if (!imageLoaded) showNotification('Loading...', '#ffc802', -1);\r\n    }, [imageLoaded]);\r\n    useEffect(() => {\r\n        if (charactersNames.length === 0) gameOver();\r\n    }, [JSON.stringify(charactersNames)]);\r\n    return (\r\n        <div id=\"Game\">\r\n            {notification}\r\n            {dropdownHandler}\r\n            <img\r\n                style={{ opacity: 0 }}\r\n                onLoad={startGame}\r\n                src=\"assets/building.jpg\"\r\n                id=\"game-image\"\r\n                onClick={newCoordinate}\r\n                alt=\"building\"\r\n            ></img>\r\n        </div>\r\n    );\r\n}\r\nexport default Game;\r\n","import '../style/SelectLevel.css';\r\nlet levels = new Map();\r\nlevels.set('Easy', ['Kaonashi', 'Bowser', 'Packman']);\r\nlevels.set('Medium', ['Kaiman', 'Guts', 'Godzilla']);\r\nlevels.set('Hard', ['Jerry', 'Corvo Attano', 'Saitama']);\r\nfunction SelectLevel(props: any) {\r\n    function levelSelected(event: any) {\r\n        if (event.target.id.includes('select')) {\r\n            props.onClick(\r\n                event.target.textContent,\r\n                levels.get(event.target.textContent)\r\n            );\r\n        }\r\n    }\r\n    return (\r\n        <div id=\"levels-container\">\r\n            <div id=\"SelectLevel\" onClick={levelSelected}>\r\n                <div id=\"select-easy\">Easy</div>\r\n                <div id=\"select-medium\">Medium</div>\r\n                <div id=\"select-hard\">Hard</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default SelectLevel;\r\n","import { useEffect, useState } from 'react';\r\nimport '../style/Leaderboard.css';\r\nimport { HH_MM_SS } from '../App';\r\ninterface data {\r\n    ID: string;\r\n    name: string;\r\n    duration: number;\r\n    recordedAt: number;\r\n    rank: number;\r\n}\r\nfunction Leaderboard(props: any) {\r\n    const [rows, setRows] = useState<JSX.Element[]>([]);\r\n    function showDifficultyTable(difficulty: string, data: any) {\r\n        if (Object.keys(data).length !== 0) {\r\n            let dataArr: Array<data> = [];\r\n            let rowsArr: Array<JSX.Element> = [];\r\n            for (let i in data) {\r\n                dataArr.push(Object.assign({ name: i }, data[i]));\r\n            }\r\n            dataArr.sort((a, b) => a.duration - b.duration);\r\n            let itr = 1;\r\n            dataArr.map((e) => Object.assign(e, { rank: itr++ }));\r\n            dataArr.forEach((row) => {\r\n                rowsArr.push(\r\n                    <tr id={'ID' + row.ID} key={row.name + difficulty}>\r\n                        <td>{row.rank}</td>\r\n                        <td>{row.name}</td>\r\n                        <td>{HH_MM_SS(row.duration / 1000)}</td>\r\n                        <td>{new Date(row.recordedAt).toUTCString()}</td>\r\n                    </tr>\r\n                );\r\n\r\n                setRows(rowsArr);\r\n            });\r\n        } else {\r\n            setRows([]);\r\n        }\r\n    }\r\n    function changeTable(event: any) {\r\n        const new_: Element = event.target;\r\n        const old: Element | null = document.querySelector('.active-table');\r\n        if (old) old.classList.remove('active-table');\r\n\r\n        new_.classList.add('active-table');\r\n        showDifficultyTable(\r\n            new_.textContent || 'Easy',\r\n            props.data[new_.textContent || 'Easy']\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        document\r\n            .querySelector('#' + props.showTable + '-table')\r\n            ?.classList.add('active-table');\r\n        const table = props.showTable || 'Easy';\r\n        if (props.data) showDifficultyTable(table, props.data[table]);\r\n        else setRows([<div key={'loading' + Math.random()}>Loading...</div>]);\r\n    }, [props.at, props.data, props.showTable]);\r\n    useEffect(() => {\r\n        const playerRecord: Element = document.querySelector(props.at);\r\n\r\n        if (playerRecord) {\r\n            playerRecord.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'center',\r\n                inline: 'nearest',\r\n            });\r\n            playerRecord.setAttribute(\r\n                'style',\r\n                'background-color:#0874FA;color:black;'\r\n            );\r\n        }\r\n    }, [JSON.stringify(rows)]);\r\n    return (\r\n        <div id=\"Leaderboard\">\r\n            <nav onClick={changeTable}>\r\n                <div id=\"Easy-table\">Easy</div>\r\n                <div id=\"Medium-table\">Medium</div>\r\n                <div id=\"Hard-table\">Hard</div>\r\n            </nav>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>rank</th>\r\n                        <th>Name</th>\r\n                        <th>Record</th>\r\n                        <th>Date</th>\r\n                    </tr>\r\n\r\n                    {rows}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\nexport default Leaderboard;\r\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport Header from './component/Header';\nimport Game from './component/Game';\nimport SelectLevel from './component/SelectLevel';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport Leaderboard from './component/Leaderboard';\nimport uniqid from 'uniqid';\ninterface gameData {\n    addedIn: number;\n    gameStartedIn: number;\n    gameEndedIn: number;\n    difficulty: string;\n}\nfunction App() {\n    const [gameStarted, setGameStarted] = useState(false);\n    const [gameEnded, setGameEnded] = useState(false);\n    const [sessionID, setSessionID] = useState(uniqueId());\n    const [main, setMain] = useState(\n        <SelectLevel onClick={levelSelected}></SelectLevel>\n    );\n\n    const [form, setForm] = useState(<></>);\n    const [charactersNames, setCharactersNames] = useState(['empty']);\n    const [difficulty, setDifficulty] = useState('non-selected');\n    const [newFoundCharacter, setNewFoundCharacter] = useState('');\n    const sessionsRef = firebase.firestore().collection('sessions');\n    const thisSessionRef = sessionsRef.doc(sessionID);\n    const leaderBoardRef = firebase.firestore().collection('leaderboard');\n    function levelSelected(difficulty: string, characters: Array<string>) {\n        setDifficulty(difficulty);\n        setMain(\n            <Game\n                imageIsLoaded={imageIsLoadedAction}\n                characters={characters}\n                updateCharacters={updateCharactersCallback}\n                gameOver={gameOverCallback}\n            ></Game>\n        );\n        setCharactersNames(characters);\n    }\n\n    async function addSessionToDatabase() {\n        thisSessionRef.set({\n            addedIn: Date.now(),\n            gameStartedIn: null,\n            gameEndedIn: null,\n            difficulty: null,\n        });\n    }\n    async function imageIsLoadedAction() {\n        setGameStarted(true);\n        thisSessionRef.update({ gameStartedIn: Date.now() });\n    }\n    async function gameOverCallback() {\n        setGameEnded(true);\n        await thisSessionRef.update({ gameEndedIn: Date.now() });\n        showForm();\n    }\n\n    async function clearIDS(ageInHours: number) {\n        sessionsRef.get().then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                let data = doc.data();\n                let age = Date.now() - data.addedIn;\n                let maxAge = ageInHours * 60 * 60 * 1000;\n                if (age >= maxAge) doc.ref.delete();\n            });\n        });\n    }\n\n    async function updateCharactersCallback(character: string) {\n        setNewFoundCharacter(character);\n    }\n    async function addToLeaderBoard(data: gameData, name: string) {\n        if (data) {\n            const duration = data.gameEndedIn - data.gameStartedIn;\n            const recordedAt = data.gameEndedIn;\n            const difficulty = data.difficulty;\n\n            await leaderBoardRef.doc(difficulty).update({\n                [name]: { duration, recordedAt, ID: sessionID },\n            });\n        } else alert(\"couldn't record result to leaderboard\");\n    }\n    async function nameSubmitted(event: any) {\n        event.preventDefault();\n        let name: string = event.target?.querySelector('#name-input').value;\n        name = name.trim();\n        const submit = event.target?.querySelector('#submit-button');\n        submit.disabled = true;\n        if (event.target)\n            await thisSessionRef.get().then(async (doc) => {\n                if (doc.exists) {\n                    let condition = await isNameUsedAlready(\n                        name,\n                        doc.data()?.difficulty\n                    );\n                    if (!condition) {\n                        setForm(<></>);\n                        setMain(<Leaderboard></Leaderboard>);\n                        await addToLeaderBoard(doc.data() as gameData, name);\n                        showLeaderBoard(doc.data()?.difficulty, name);\n                    } else {\n                        submit.disabled = false;\n                        alert('This name is used already.');\n                    }\n                }\n            });\n    }\n    async function isNameUsedAlready(name: string, difficulty: string) {\n        let result = false;\n        await leaderBoardRef\n            .doc(difficulty)\n            .get()\n            .then((doc) => {\n                if (doc.exists) {\n                    if ((doc.data() || {})[name]) {\n                        result = true;\n                    }\n                }\n            });\n        return result;\n    }\n    async function showLeaderBoard(startIn: string, name: string) {\n        let difficulties: any = {};\n        await leaderBoardRef.get().then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                if (doc.exists) difficulties[doc.id] = doc.data();\n            });\n        });\n        setMain(\n            <Leaderboard\n                data={difficulties}\n                showTable={startIn}\n                at={'#ID' + sessionID}\n            ></Leaderboard>\n        );\n    }\n    function showForm() {\n        setForm(\n            <form style={{ opacity: 0 }}>\n                <div id=\"name-input-container\">\n                    <label>Your name:</label>\n                    <input id=\"name-input\"></input>\n                </div>\n                <input id=\"submit-button\" type=\"submit\"></input>\n            </form>\n        );\n        setTimeout(() => {\n            setForm(\n                <form onSubmit={nameSubmitted} style={{ opacity: 1 }}>\n                    <div id=\"name-input-container\">\n                        <label>Your name:</label>\n                        <input id=\"name-input\" required></input>\n                    </div>\n                    <input id=\"submit-button\" type=\"submit\"></input>\n                </form>\n            );\n        }, 200);\n    }\n    useEffect(() => {\n        //adding the session to the database\n        addSessionToDatabase();\n        //remove all session that are older than one day\n        clearIDS(4);\n    }, []);\n    useEffect(() => {\n        thisSessionRef.update({ difficulty: difficulty });\n    }, [difficulty]);\n    return (\n        <div className=\"App\">\n            <Header\n                foundCharacter={newFoundCharacter}\n                gameStarted={gameStarted}\n                characters={charactersNames}\n                gameEnded={gameEnded}\n                showLeaderBoard={() => {\n                    setMain(<Leaderboard></Leaderboard>);\n                    showLeaderBoard('Easy', '');\n                    setGameEnded(true);\n                }}\n            ></Header>\n            {form}\n            {main}\n        </div>\n    );\n}\n\nconst uniqueId = () => {\n    return Math.ceil(Math.random() * Math.random() * Date.now())\n        .toPrecision(16)\n        .toString()\n        .replace('.', '')\n        .toString();\n};\nexport function HH_MM_SS(inSeconds: number) {\n    let hours: any = Math.floor(inSeconds / 3600);\n    let minutes: any = Math.floor((inSeconds - hours * 3600) / 60);\n    let seconds: any = inSeconds - hours * 3600 - minutes * 60;\n    seconds = Math.round(seconds * 100) / 100;\n    if (hours < 10 && hours !== 0) {\n        hours = '0' + hours + ':';\n    } else if (hours === 0) hours = '';\n    if (minutes < 10) {\n        minutes = '0' + minutes;\n    }\n    if (seconds < 10) {\n        seconds = '0' + seconds;\n    }\n\n    return hours + '' + minutes + ':' + seconds;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import firebase from 'firebase/app';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nexport const app = firebase.initializeApp({\n    apiKey: 'AIzaSyCfUgLy7_SmD78BLzr7ohztt7o9tZyj6IM',\n    authDomain: 'where-s-waldo-7ace2.firebaseapp.com',\n    projectId: 'where-s-waldo-7ace2',\n    storageBucket: 'where-s-waldo-7ace2.appspot.com',\n    messagingSenderId: '225583877908',\n    appId: '1:225583877908:web:4f36fc2d5a8567e7473c01',\n    measurementId: 'G-RW1YB0F875',\n});\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}